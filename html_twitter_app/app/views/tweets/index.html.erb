<h1>HTMLtwitter</h1>

<h3>Current User: <%= @tweets.first.user.username %>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  <%= link_to "New Tweet", new_tweet_path(@tweets) %></h3>

<ul>
  <% @tweets.reverse.each do |tweet| %>
  <br>
  <%= image_tag("nerd_gif_48x48.gif", :alt => "smiley_face_gif") %>
  <strong><%= link_to tweet.user.username, user_path(tweet.user_id) %></strong>
  &middot;
  <!-- above is a middle dot, to separate username from date -->
  <%= tweet.created_at.strftime("%d %b %Y at %I:%M %p") %>
  <p><%= tweet.content %></p>
  <button class="clicker js-explode">Like</button>&nbsp;&nbsp;<span id="counter"></span>
  <!-- make above a create like form -->
  <!-- condition ? if_true : if_false -->
  <% tweet.likes.count === 0 ? '' : tweet.likes.count %>
  <!-- above is ternary operator saying if tweet has 10 likes, display black text, otherwise diplay like count
  change 10 to 0 once Liking is working properly -->
  <br>
  -------------------------------------------------------
  <br><br>
    <% end %>
</ul>

<script type="text/javascript">

// $(function() {
//   $(".answer").click(function() {
//     if(this.innerHTML.length === 4 && count > 0) {
//       $(this).css("background", "green")
//       console.log($(this).css("background", "green"));
//       score += 2
//       $("#score").html(`Score: ${renderScore()}`)
//     } else if(count > 0 && $(this).css("background", "white")) {
//       $(this).css("background", "red")
//       score -= 4
//       $("#score").html(`Score: ${renderScore()}`)
//     }
//   })
// })

//now class instead of ID
//$('#counter').html("0"); // Set the initial value to 0
$('#counter').html(""); // Set the initial value to nothing

$('.clicker').click(function(){
  console.log('tweet liked!');
  //$(this).css("background", "green");
  //console.log($(this).css("background", "green"));

  var count = Number($('#counter').html() ); // Get the current value
 $('#counter').html(count+1); // Add 1 to the counter
});

//only works on first
// $('#counter').html(); // Set the initial value
//
// $('#clicker').click(function(){
//  var count = Number($('#counter').html()); // Get the current value
//  $('#counter').html(count+1); // Add 1 to the counter
// });





//code for exploding button-mouseover-effect,

//inspired by Anchor Click Canvas Animation CodePen via:
//http://codepen.io/nicksheffield/pen/NNEoLg/

// and Explosion AI particles animation CodePen via:
//http://codepen.io/explosion/pen/zKEovE


{
    const colors = [ '#ffc000', '#ff3b3b', '#ff8400', 'blue', 'purple', 'palegreen']; //added 'blue', 'purple', 'palegreen' to orange, red, yellow
    const bubbles = 25;

    const explode = (x, y) => {
        let particles = [];
        let ratio = window.devicePixelRatio;
        let c = document.createElement('canvas');
        let ctx = c.getContext('2d');

        c.style.position = 'absolute';
        c.style.left = (x - 100) + 'px';
        c.style.top = (y - 100) + 'px';
        c.style.pointerEvents = 'none';
        c.style.width = 200 + 'px';
        c.style.height = 200 + 'px';
        c.style.zIndex = 100;
        c.width = 200 * ratio;
        c.height = 200 * ratio;
        document.body.appendChild(c);

        for(var i = 0; i < bubbles; i++) {
            particles.push({
                x: c.width / 2,
                y: c.height / 2,
                radius: r(20, 30),
                color: colors[Math.floor(Math.random() * colors.length)],
                rotation: r(0, 360, true),
                speed: r(8, 12),
                friction: 0.9,
                opacity: r(0, 0.5, true),
                yVel: 0,
                gravity: 0.1
            });
        }

        render(particles, ctx, c.width, c.height);
        setTimeout(() => document.body.removeChild(c), 1000);
    }

    const render = (particles, ctx, width, height) => {
        requestAnimationFrame(() => render(particles, ctx, width, height));
        ctx.clearRect(0, 0, width, height);

        particles.forEach((p, i) => {
            p.x += p.speed * Math.cos(p.rotation * Math.PI / 180);
            p.y += p.speed * Math.sin(p.rotation * Math.PI / 180);

            p.opacity -= 0.01;
            p.speed *= p.friction;
            p.radius *= p.friction;
            p.yVel += p.gravity;
            p.y += p.yVel;

            if(p.opacity < 0 || p.radius < 0) return;

            ctx.beginPath();
            ctx.globalAlpha = p.opacity;
            ctx.fillStyle = p.color;
            ctx.arc(p.x, p.y, p.radius, 0, 2 * Math.PI, false);
            ctx.fill();
        });

        return ctx;
    }

    const r = (a, b, c) => parseFloat((Math.random() * ((a ? a : 1) - (b ? b : 0)) + (b ? b : 0)).toFixed(c ? c : 0));

    document.querySelector('.js-explode').addEventListener('click', e => explode(e.pageX, e.pageY));  // class .js-exlode explodes on click
}

</script>
